{"version":3,"sources":["webpack:///./src/pages/frontend/index.js","webpack:///./src/utils/unwidow.js"],"names":["YearTitle","_ref","children","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","styles","year","PostTitle","_ref2","BlogPage","title","useSiteMetadata","posts","_public_static_d_3609948944_json__WEBPACK_IMPORTED_MODULE_0__","data","allMarkdownRemark","edges","Fragment","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","map","_ref3","index","YearComponent","node","fields","frontmatter","thisYear","post","width","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","slug","unwidow","fontSize","lineHeight","mt","mb","description","str","clean","trim","replace","match","length","split","pop"],"mappings":"4LAOMA,EAAY,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,MAAON,IAE1BO,EAAY,SAAAC,GAAA,IAAGR,EAAHQ,EAAGR,SAAH,OAAkBC,EAAAC,EAAAC,cAAA,UAAKH,IAwE1BS,UAlEE,WAAM,IACbC,EAAUC,cAAVD,MAoBFE,EAnBIC,EAAAC,KAmBSC,kBAAkBC,MACjCV,EAAO,IAEX,OACEL,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,KACED,EAAAC,EAAAC,cAAA,uBAAeO,IAGjBT,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOO,OACrBX,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,YACGS,EAAMO,IAAI,SAAAC,EAAWC,GAAU,IAG1BC,EAHQC,EAAkBH,EAAlBG,KACJC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,YACVC,EAAWD,EAAYnB,KAQ7B,OALIoB,IAAapB,IACfgB,EAAgBrB,EAAAC,EAAAC,cAACL,EAAD,KAAY2B,EAAYnB,MACxCA,EAAOoB,GAIPzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOsB,MACpBL,EAEDrB,EAAAC,EAAAC,cAAA,OAAKyB,MAAO,CAAC,EAAG,KACd3B,EAAAC,EAAAC,cAACI,EAAD,KACEN,EAAAC,EAAAC,cAAC0B,EAAA,KAAD,CAAMC,GAAIN,EAAOO,MAAOC,YAAQP,EAAYf,SAG9CT,EAAAC,EAAAC,cAAA,KAAG8B,SAAU,CAAC,EAAG,GAAIC,WAAW,OAAOC,GAAI,EAAGC,GAAI,GAC/CJ,YAAQP,EAAYY,4ECnD5BL,IAlBC,SAAAM,GAEd,IAAMC,EAAQD,EAAIE,OAAOC,QAAQ,OAAQ,KAKzC,OADcF,EAAMG,MAAM,QAAU,GAAGC,QAC3B,EAAUJ,EAGlBA,EAAMK,MAAM,KAAKC,MAAMF,OAAS,GAAWJ,EAKxCA,EAAME,QAAQ,oBAAqB","file":"component---src-pages-frontend-index-js-f556a07fe7d3387119e8.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\nimport { useSiteMetadata } from '../../utils/hooks'\nimport unwidow from '../../utils/unwidow'\nimport styles from './frontend.module.css'\nconst YearTitle = ({ children }) => (\n  <div className={styles.year}>{children}</div>\n)\nconst PostTitle = ({ children }) => <h1>{children}</h1>\n\nPostTitle.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nconst BlogPage = () => {\n  const { title } = useSiteMetadata()\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n        edges {\n          node {\n            frontmatter {\n              title\n              description\n              year: date(formatString: \"YYYY\")\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const posts = data.allMarkdownRemark.edges\n  let year = '0'\n\n  return (\n    <>\n      <Helmet>\n        <title>Blog â€¢ {title}</title>\n      </Helmet>\n\n      <div className={styles.posts}>\n        <article>\n          <main>\n            {posts.map(({ node }, index) => {\n              const { fields, frontmatter } = node\n              const thisYear = frontmatter.year\n              let YearComponent\n\n              if (thisYear !== year) {\n                YearComponent = <YearTitle>{frontmatter.year}</YearTitle>\n                year = thisYear\n              }\n\n              return (\n                <div className={styles.post}>\n                  {YearComponent}\n\n                  <div width={[1, 4 / 5]}>\n                    <PostTitle>\n                      <Link to={fields.slug}>{unwidow(frontmatter.title)}</Link>\n                    </PostTitle>\n\n                    <p fontSize={[1, 2]} lineHeight=\"copy\" mt={3} mb={2}>\n                      {unwidow(frontmatter.description)}\n                    </p>\n                  </div>\n                </div>\n              )\n            })}\n          </main>\n        </article>\n      </div>\n    </>\n  )\n}\n\nexport default BlogPage\n","const unwidow = str => {\n  // Remove extra whitespace characters before starting.\n  const clean = str.trim().replace(/\\s+/g, ' ')\n\n  // We only care about strings with at least 4 words, so if we don't find at\n  // least 3 spaces in the string we can just return the cleaned up string.\n  const count = clean.match(/\\s/g) || [].length\n  if (count < 3) return clean\n\n  // If the last word is long enough, just return the cleaned string.\n  if (clean.split(' ').pop().length > 15) return clean\n\n  // Regex matches the last instance of a whitespace character that is followed\n  // by a non-whitespace character. It then replaces the former with a\n  // non-breaking space character (\\u00A0).\n  return clean.replace(/\\s+([\\S]*)(\\s*)$/g, '\\u00A0$1$2')\n}\n\nexport default unwidow\n"],"sourceRoot":""}