{"version":3,"sources":["webpack:///./src/templates/BlogPost/MarkdownContent.js","webpack:///./src/templates/BlogPost/BlogPost.js","webpack:///./src/utils/unwidow.js"],"names":["MarkdownContent","props","react_default","a","createElement","Object","assign","className","__webpack_require__","d","__webpack_exports__","pageQuery","BlogPostTemplate","_ref","data","_useSiteMetadata","useSiteMetadata","title","siteUrl","post","markdownRemark","Fragment","Helmet_default","frontmatter","name","content","description","property","fields","slug","styles","unwidow","dateTime","datetime","date","BlogPost_MarkdownContent","dangerouslySetInnerHTML","__html","html","propTypes","PropTypes","object","isRequired","str","clean","trim","replace","match","length","split","pop"],"mappings":"sJA2PeA,gBAvPS,SAAAC,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,MAAAC,OAAAC,OAAA,CAAKC,UAAU,mBAAsBN,yCCLvCO,EAAAC,EAAAC,EAAA,8BAAAC,IASA,IAAMC,EAAmB,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,EACVC,cAAnBC,EAD6BF,EAC7BE,MAAOC,EADsBH,EACtBG,QAETC,EAAOL,EAAKM,eAElB,OACElB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACED,EAAAC,EAAAC,cAAA,aACGe,EAAKI,YAAYN,MADpB,MAC8BA,GAG9Bf,EAAAC,EAAAC,cAAA,QAAMoB,KAAK,cAAcC,QAASN,EAAKI,YAAYG,cACnDxB,EAAAC,EAAAC,cAAA,QACEoB,KAAK,WACLC,QAAQ,0DAEVvB,EAAAC,EAAAC,cAAA,QAAMuB,SAAS,eAAeF,QAASR,IACvCf,EAAAC,EAAAC,cAAA,QACEuB,SAAS,WACTH,KAAK,gBACLC,QAASN,EAAKI,YAAYN,QAE5Bf,EAAAC,EAAAC,cAAA,QAAMuB,SAAS,SAASF,QAAO,GAAKP,EAAUC,EAAKS,OAAOC,OAC1D3B,EAAAC,EAAAC,cAAA,QACEuB,SAAS,iBACTH,KAAK,sBACLC,QAASN,EAAKI,YAAYG,eAG9BxB,EAAAC,EAAAC,cAAA,OAAKG,UAAWuB,IAAOX,MACrBjB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UAAK2B,YAAQZ,EAAKI,YAAYN,QAC9Bf,EAAAC,EAAAC,cAAA,QAAM4B,SAAUb,EAAKI,YAAYU,UAC9Bd,EAAKI,YAAYW,MAGpBhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAiBC,wBAAyB,CAAEC,OAAQlB,EAAKmB,YAOnE1B,EAAiB2B,UAAY,CAC3BzB,KAAM0B,IAAUC,OAAOC,YAGlB,IAAM/B,EAAS,aAkBPC,kECzDAmB,IAlBC,SAAAY,GAEd,IAAMC,EAAQD,EAAIE,OAAOC,QAAQ,OAAQ,KAKzC,OADcF,EAAMG,MAAM,QAAU,GAAGC,QAC3B,EAAUJ,EAGlBA,EAAMK,MAAM,KAAKC,MAAMF,OAAS,GAAWJ,EAKxCA,EAAME,QAAQ,oBAAqB","file":"component---src-templates-blog-post-blog-post-js-a01d3f043eb43e1152c8.js","sourcesContent":["import React from 'react'\nimport './markdowncontent.css'\n// this component basically exists as a giant stylesheet that inherits from the\n// theme. it's for markdown content (hence the name). it's kind of a b\nconst MarkdownContent = props => (\n  <div className=\"markdownContent\" {...props}></div>\n)\n// const MarkdownContent = styled(Text)`\n//   /* Vertical Rhythm */\n//   & > * {\n//     /* reset all margins */\n//     margin-top: 0;\n//     margin-bottom: 0;\n\n//     /* margin top to all child elements */\n//     & + * {\n//       margin-top: ${({ theme }) => theme.space[3]};\n//     }\n\n//     /* bigger margin top on headers */\n//     & + h1,\n//     & + h2 {\n//       margin-top: ${({ theme }) => theme.space[5]};\n//     }\n\n//     & + h3,\n//     & + h4 {\n//       margin-top: ${({ theme }) => theme.space[4]};\n//     }\n//   }\n\n//   h1,\n//   h2,\n//   h3,\n//   h4,\n//   h5,\n//   h6 {\n//     line-height: ${({ theme }) => theme.lineHeights.title};\n//   }\n\n//   p,\n//   ul,\n//   ol,\n//   dl,\n//   address {\n//     max-width: 33em;\n//   }\n\n//   /* Headers */\n//   h1 {\n//     font-size: ${({ theme }) => theme.fontSizes[3]};\n//     font-weight: 600;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[4]};\n//     }\n//   }\n\n//   h2 {\n//     font-size: ${({ theme }) => theme.fontSizes[2]};\n//     font-weight: 600;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[3]};\n//     }\n//   }\n\n//   h3 {\n//     font-size: ${({ theme }) => theme.fontSizes[1]};\n//     font-weight: 600;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[2]};\n//     }\n//   }\n\n//   h4,\n//   h5,\n//   h6 {\n//     font-size: ${({ theme }) => theme.fontSizes[1]};\n//     font-weight: 500;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[2]};\n//     }\n//   }\n\n//   h1 code,\n//   h2 code,\n//   h3 code,\n//   h4 code,\n//   h5 code,\n//   h6 code {\n//     background-color: transparent;\n//     color: inherit;\n//   }\n\n//   /* Type Elements */\n\n//   hr {\n//     max-width: 4rem;\n//     height: ${({ theme }) => theme.space[1]};\n//     margin: ${({ theme }) => theme.space[4]} 0;\n//     border: 0;\n//     background-color: ${({ theme }) => theme.colors.orange};\n//   }\n\n//   ul,\n//   ol,\n//   dl {\n//     padding-left: ${({ theme }) => theme.space[4]};\n//   }\n\n//   ul ul,\n//   ol ol,\n//   ul ol,\n//   ol ul {\n//     margin-top: 0;\n//     margin-bottom: 0;\n//   }\n\n//   b,\n//   strong,\n//   em,\n//   small,\n//   code {\n//     line-height: 1;\n//   }\n\n//   sup,\n//   sub {\n//     vertical-align: baseline;\n//     position: relative;\n//     top: -0.4em;\n//   }\n\n//   sub {\n//     top: 0.4em;\n//   }\n\n//   a {\n//     ${themeHover};\n//     ${themeUnderline};\n\n//     &:hover code {\n//       color: ${({ theme }) => theme.colors.orange};\n//     }\n\n//     @media print {\n//       &:after {\n//         content: ' (' attr(href) ')';\n//         font-size: 0.875em;\n//       }\n//       &[href^='/']:after {\n//         content: ' (https://lowmess.com' attr(href) ')';\n//       }\n//       &[href^='#'] {\n//         text-decoration: none;\n\n//         &:after {\n//           content: '';\n//         }\n//       }\n//     }\n//   }\n\n//   blockquote,\n//   details {\n//     margin-top: ${({ theme }) => theme.space[4]};\n//     margin-right: 0;\n//     margin-bottom: ${({ theme }) => theme.space[4]};\n//     margin-left: 0;\n//     border-left: ${({ theme }) => theme.borders[3]}\n//       ${({ theme }) => theme.colors.orange};\n//     border-radius: ${({ theme }) => theme.radii[1]};\n//     padding: ${({ theme }) => theme.space[3]};\n//     background-color: ${({ theme }) => theme.colors.grays[1]};\n\n//     p {\n//       max-width: 30em;\n//     }\n\n//     > :first-child {\n//       margin-top: 0;\n//     }\n//     > :last-child {\n//       margin-bottom: 0;\n//     }\n//   }\n\n//   code {\n//     font-family: ${({ theme }) => theme.fonts.monospace};\n//   }\n\n//   p code,\n//   li code {\n//     border: 1px solid rgba(0, 0, 0, 0.1);\n//     border-radius: ${({ theme }) => theme.radii[1]};\n//     padding-left: ${({ theme }) => theme.space[1]};\n//     padding-right: ${({ theme }) => theme.space[1]};\n//     background-color: ${({ theme }) => theme.colors.grays[1]};\n//     color: ${({ theme }) => theme.colors.black};\n//     font-size: ${({ theme }) => theme.fontSizes[0]};\n//     white-space: nowrap;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[1]};\n//     }\n//   }\n\n//   pre {\n//     width: 100%;\n//     overflow-x: scroll;\n//     margin-top: ${({ theme }) => theme.space[4]};\n//     margin-bottom: ${({ theme }) => theme.space[4]};\n//     border-left: ${({ theme }) => theme.borders[3]}\n//       ${({ theme }) => theme.colors.orange};\n//     border-radius: ${({ theme }) => theme.radii[1]};\n//     padding: ${({ theme }) => theme.space[3]};\n//     background-color: ${({ theme }) => theme.colors.grays[11]};\n//     color: ${({ theme }) => theme.colors.grays[1]};\n//     font-size: ${({ theme }) => theme.fontSizes[0]};\n//     font-family: ${({ theme }) => theme.fonts.monospace};\n//     white-space: pre;\n\n//     @media (min-width: ${({ theme }) => theme.breakpoints[0]}) {\n//       font-size: ${({ theme }) => theme.fontSizes[1]};\n//     }\n\n//     @media print {\n//       background-color: transparent;\n//       color: ${({ theme }) => theme.colors.black};\n//     }\n//   }\n\n//   img {\n//     display: block;\n//     width: 100%;\n//     max-width: 48rem;\n//     margin-top: ${({ theme }) => theme.space[4]};\n//     margin-bottom: ${({ theme }) => theme.space[4]};\n//     border-radius: ${({ theme }) => theme.radii[1]};\n//   }\n\n//   iframe {\n//     margin-top: ${({ theme }) => theme.space[4]};\n//     margin-bottom: ${({ theme }) => theme.space[4]};\n//     border: 1px solid ${({ theme }) => theme.colors.grays[2]};\n//   }\n// `\n\nexport default MarkdownContent\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\nimport MarkdownContent from './MarkdownContent'\nimport { useSiteMetadata } from '../../utils/hooks'\nimport unwidow from '../../utils/unwidow'\nimport styles from './blogpost.module.css'\n\nconst BlogPostTemplate = ({ data }) => {\n  const { title, siteUrl } = useSiteMetadata()\n\n  const post = data.markdownRemark\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {post.frontmatter.title} â€¢ {title}\n        </title>\n\n        <meta name=\"description\" content={post.frontmatter.description} />\n        <meta\n          name=\"viewport\"\n          content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n        ></meta>\n        <meta property=\"og:site_name\" content={title} />\n        <meta\n          property=\"og:title\"\n          name=\"twitter:title\"\n          content={post.frontmatter.title}\n        />\n        <meta property=\"og:url\" content={`${siteUrl}${post.fields.slug}`} />\n        <meta\n          property=\"og:description\"\n          name=\"twitter:description\"\n          content={post.frontmatter.description}\n        />\n      </Helmet>\n      <div className={styles.post}>\n        <article>\n          <h1>{unwidow(post.frontmatter.title)}</h1>\n          <time dateTime={post.frontmatter.datetime}>\n            {post.frontmatter.date}\n          </time>\n\n          <MarkdownContent dangerouslySetInnerHTML={{ __html: post.html }} />\n        </article>\n      </div>\n    </>\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  data: PropTypes.object.isRequired,\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      id\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        datetime: date(formatString: \"YYYY-MM-DD\")\n        description\n      }\n      fields {\n        slug\n      }\n    }\n  }\n`\n\nexport default BlogPostTemplate\n","const unwidow = str => {\n  // Remove extra whitespace characters before starting.\n  const clean = str.trim().replace(/\\s+/g, ' ')\n\n  // We only care about strings with at least 4 words, so if we don't find at\n  // least 3 spaces in the string we can just return the cleaned up string.\n  const count = clean.match(/\\s/g) || [].length\n  if (count < 3) return clean\n\n  // If the last word is long enough, just return the cleaned string.\n  if (clean.split(' ').pop().length > 15) return clean\n\n  // Regex matches the last instance of a whitespace character that is followed\n  // by a non-whitespace character. It then replaces the former with a\n  // non-breaking space character (\\u00A0).\n  return clean.replace(/\\s+([\\S]*)(\\s*)$/g, '\\u00A0$1$2')\n}\n\nexport default unwidow\n"],"sourceRoot":""}