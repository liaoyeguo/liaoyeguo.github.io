{"componentChunkName":"component---src-templates-blog-post-blog-post-js","path":"/frontend/this_in_javascript/","webpackCompilationHash":"3c9f200bb57399a15904","result":{"data":{"markdownRemark":{"html":"<h2 id=\"全局作用域里的-this\"><a href=\"#%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%87%8C%E7%9A%84-this\" aria-label=\"全局作用域里的 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>全局作用域里的 this</h2>\n<p>非严格模式下，<code class=\"language-text\">this</code>指向<code class=\"language-text\">window</code>对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window <span class=\"token comment\">// true</span></code></pre></div>\n<p>严格模式下，<code class=\"language-text\">this</code>指向<code class=\"language-text\">undefined</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span>\n<span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span></code></pre></div>\n<h2 id=\"函数里的-this\"><a href=\"#%E5%87%BD%E6%95%B0%E9%87%8C%E7%9A%84-this\" aria-label=\"函数里的 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数里的 this</h2>\n<p>函数里的<code class=\"language-text\">this</code>指向调用函数的对象。在全局作用域下调用函数，该对象是<code class=\"language-text\">window</code>。如果以对象方法的方式来调用，例如<code class=\"language-text\">obj.methd()</code>,则<code class=\"language-text\">method</code>里的<code class=\"language-text\">this</code>指向<code class=\"language-text\">obj</code>，因为是<code class=\"language-text\">obj</code>调用了<code class=\"language-text\">method</code>。</p>\n<h3 id=\"函数传递\"><a href=\"#%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92\" aria-label=\"函数传递 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数传递</h3>\n<p>Javascript 的函数名只是一个指针（类似 c++的函数指针），它指向了函数的地址。所以在 Javascript 里我们可以把函数赋值给多个变量、把函数当作参数传递给函数。下面的代码声明了一个<code class=\"language-text\">realFunc</code>函数，并且把它赋给<code class=\"language-text\">foo</code>和<code class=\"language-text\">bar</code>两个变量。可以看到，<code class=\"language-text\">foo</code>和<code class=\"language-text\">bar</code>只是两个名字不同，但是指向相同（指向<code class=\"language-text\">realFunc</code>）的指针。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">realFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> foo\nfoo <span class=\"token operator\">===</span> bar <span class=\"token comment\">// true</span>\nfoo<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"realFunc\"</span>\nbar<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// \"realFunc\"</span></code></pre></div>\n<h3 id=\"以对象方法的方式调用\"><a href=\"#%E4%BB%A5%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%E7%9A%84%E6%96%B9%E5%BC%8F%E8%B0%83%E7%94%A8\" aria-label=\"以对象方法的方式调用 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>以对象方法的方式调用</h3>\n<p>下面的代码实现了一个计数器对象，对象的<code class=\"language-text\">count</code>属性被初始化为 0，对象有一个每次调用让<code class=\"language-text\">count</code>加一的<code class=\"language-text\">increase</code>方法。因为我们用<code class=\"language-text\">counter.increase()</code>的方式来调用<code class=\"language-text\">increase</code>,函数（方法）的调用者是<code class=\"language-text\">counter</code>，因此<code class=\"language-text\">increase</code>里的<code class=\"language-text\">this</code>指向<code class=\"language-text\">counter</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">increase</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ncounter<span class=\"token punctuation\">.</span>count <span class=\"token comment\">// 0</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 自增</span>\ncounter<span class=\"token punctuation\">.</span>count <span class=\"token comment\">// 1</span></code></pre></div>\n<h3 id=\"直接调用\"><a href=\"#%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8\" aria-label=\"直接调用 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>直接调用</h3>\n<p>在全局作用域里直接调用函数，函数里的<code class=\"language-text\">this</code>指向<code class=\"language-text\">window</code>对象。这是因为<code class=\"language-text\">initCounter</code>函数是挂在<code class=\"language-text\">window</code>对象下的，<code class=\"language-text\">initCounter()</code>相当于<code class=\"language-text\">window.initCounter()</code>。调用函数<code class=\"language-text\">initCounter</code>，会将<code class=\"language-text\">this.count</code>（<code class=\"language-text\">window.count</code>）设置为<code class=\"language-text\">0</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">initCounter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">initCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwindow<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"调用时绑定\"><a href=\"#%E8%B0%83%E7%94%A8%E6%97%B6%E7%BB%91%E5%AE%9A\" aria-label=\"调用时绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>调用时绑定</h3>\n<p>所谓的调用时绑定，说的是函数里的<code class=\"language-text\">this</code>并不是在函数声明时就绑定的，而是在函数被调用时才会绑定。继续使用我们的计数器的例子来说明，在声明对象<code class=\"language-text\">counter</code>的方法<code class=\"language-text\">increase</code>时候，<code class=\"language-text\">increase</code>里的<code class=\"language-text\">this</code>似乎是指向了<code class=\"language-text\">counter</code>（声明时绑定）。我们使用<code class=\"language-text\">setTimeout</code>来把<code class=\"language-text\">increase</code>被设置为 1ms 后调用，注意，我们把函数以指针的方式传递给<code class=\"language-text\">setTimeout</code>。在函数被调用时，<code class=\"language-text\">this</code>指向<code class=\"language-text\">window</code>，而不是<code class=\"language-text\">counter</code>（调用时绑定）。相当于<code class=\"language-text\">var f = counter.increase; window.f()</code>。因为<code class=\"language-text\">window</code>并没用名为<code class=\"language-text\">count</code>的属性，所以<code class=\"language-text\">window.count + 1 =&gt; undefined + 1 =&gt; NaN</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">increase</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>increase<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 函数被调用后</span>\n<span class=\"token comment\">// o.counter => 1</span>\n<span class=\"token comment\">// window.counter => NaN</span></code></pre></div>\n<h3 id=\"显式绑定\"><a href=\"#%E6%98%BE%E5%BC%8F%E7%BB%91%E5%AE%9A\" aria-label=\"显式绑定 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>显式绑定</h3>\n<p>以上的代码里，<code class=\"language-text\">this</code>都是在运行的时候被隐式地绑定到一个对象上。我们可以使用<code class=\"language-text\">bind</code>、<code class=\"language-text\">call</code>、<code class=\"language-text\">apply</code>来实现显式绑定。</p>\n<h4 id=\"bind\"><a href=\"#bind\" aria-label=\"bind permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bind</h4>\n<p>我们使用<code class=\"language-text\">bind</code>函数将<code class=\"language-text\">counter</code>绑定到<code class=\"language-text\">increase</code>函数的<code class=\"language-text\">this</code>上，无论之后我们以什么方式调用<code class=\"language-text\">increase</code>，<code class=\"language-text\">this</code>都指向<code class=\"language-text\">counter</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n<span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncounter<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h4 id=\"call-和-apply\"><a href=\"#call-%E5%92%8C-apply\" aria-label=\"call 和 apply permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call 和 apply</h4>\n<p>使用从<code class=\"language-text\">Function</code>那里继承来的<code class=\"language-text\">call</code>或者<code class=\"language-text\">apply</code>方法可以在函数调用时显示地绑定<code class=\"language-text\">this</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> c <span class=\"token operator\">+</span> d\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<h2 id=\"addeventlistener-回调函数里的-this\"><a href=\"#addeventlistener-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E9%87%8C%E7%9A%84-this\" aria-label=\"addeventlistener 回调函数里的 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>addeventlistener 回调函数里的 this</h2>\n<p>我们可以使用<code class=\"language-text\">addeventlistener</code>来监听 dom 元素的事件。事件触发时，回掉函数里的<code class=\"language-text\">this</code>指向被监听的 dom 元素。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>foo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// js</span>\n<span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 &lt;div id=\"foo\">foo&lt;/div></span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> div<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"构造函数里的-this\"><a href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E7%9A%84-this\" aria-label=\"构造函数里的 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>构造函数里的 this</h2>\n<p>我们可以把函数当作构造函数来用，即在函数前添加关键字<code class=\"language-text\">new</code>。构造函数在被调用时会新建一个空对象，并且把<code class=\"language-text\">this</code>指向这个新对象。在函数结束后，如果没有显式地返回一个对象，那么这个新建的对象会被返回。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Person</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lily'</span><span class=\"token punctuation\">)</span>\nperson<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// lily</span></code></pre></div>","id":"d9ec19b2-2003-54ec-b825-32b4618c07bc","frontmatter":{"title":"Javascript里的this指向","date":"2019-08-09","description":"本文总结了Javascript中this的指问题.","author":"廖业国","tags":["javascript","this引用","this绑定"]},"fields":{"slug":"frontend/this_in_javascript/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"frontend/this_in_javascript/"}}}